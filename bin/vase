#!/usr/bin/env python3

import sys
import argparse
from vase.vase_runner import VaseRunner

def parse_args():
    parser = argparse.ArgumentParser(
                       description='Variant annotation, segregation and ' +
                                   'exclusion.',
                       add_help=False,
                       formatter_class=argparse.RawTextHelpFormatter)
    parser._action_groups.pop()
    required_args = parser.add_argument_group('Required Arguments')
    output_args = parser.add_argument_group('Output Arguments')
    file_args = parser.add_argument_group('Annotation File Arguments')
    filter_args = parser.add_argument_group('Variant Filtering Arguments',
        'Arguments for filtering based on variant features')
    filter_field_args = filter_args.add_mutually_exclusive_group()
    region_args = parser.add_argument_group('Region Filtering Arguments',
        'Arguments for filtering variants on genomic regions. These arguments'+
                                           ' are mutually exclusive.')
    bed_args = region_args.add_mutually_exclusive_group()
    sample_args = parser.add_argument_group('Sample Based Filtering Arguments',
'''Arguments for filtering variants based on presence/absence in samples and/or
inheritance patterns.''')
    gt_args = parser.add_argument_group('Genotype Filtering Arguments',
'''Arguments for filtering genotypes when using 'Sample Based Filtering
Arguments' to filter on presence/absence in samples and/or inheritance
patterns.''')
    sv_gt_args = parser.add_argument_group(
        'Structural Variant Genotype Filtering Arguments',
'''Arguments for filtering genotypes for Structural Variant calls when using
'Sample Based Filtering Arguments' to filter on presence/absence in samples
and/or inheritance patterns. Only output from Manta currently supported.''')
    help_args = parser.add_argument_group('Help/Logging Arguments')

    #required arguments
    required_args.add_argument(
'-i', '--input', required=True, metavar='VCF', help=
'''Input VCF filename

''')
    #output arguments
    output_args.add_argument(
'-o', '--output', help=
#'-o', '--output', type=argparse.FileType('w'), default=sys.stdout, help=
'''Filename for VCF output. If this ends in .gz or
.bgz the output will be BGZIP compressed.
Default = STDOUT

''')

    output_args.add_argument(
'-r', '--report_prefix', help=
'''Prefix for segregation summary report output
files. If either --biallelic, --de_novo or
--dominant options are in effect this option will
write summaries for segregating variants to files
with the respective suffixes of
'_recessive.report.tsv', '_de_novo.report.tsv' and
'_dominant.report.tsv'.

''')

    output_args.add_argument(
'-burden_counts', '--burden_counts', help=
'''File for outputting 'burden counts' per
transcript. If specified, the number of alleles
passing specified filters will be counted for
each transcript identified. Requires your VCF
input to be annotated with Ensembl's VEP. Note,
that if --cases or --controls are specified when
using this argument, variants will not be filtered
on presence in cases/controls; instead counts will
be written for cases and controls to this file.

''')

    output_args.add_argument(
'-gnomad_burden', '--gnomad_burden', action='store_true', default=False, help=
'''If using --burden_counts, use this flag to
indicate that the input is from gnomAD and should
be parsed per population.

''')

    #args for filtering/retaining variants based on features
    filter_args.add_argument(
'-v', '--variant_quality', type=float, metavar='QUAL', help=
'''Minimum variant quality score ('QUAL' field).
Variants with a QUAL score below this value will be
filtered/ignored.

''')
    filter_field_args.add_argument(
'-p', '--pass_filters', action='store_true', default=False, help=
'''Only keep variants that have passed filters
(i.e. FILTER field must be "PASS")

''' )
    filter_field_args.add_argument(
'--keep_filters', nargs='+', help=
'''Only keep variants that have these FILTER Fields.
Can not be used with --pass_filters but you can
use 'pass' as one of your arguments here to retain
variants that pass filters in addition to variants
with a FILTER Field matching the values specified.
If multiple filter annotations are given for a
variant all must match one of these fields or it
will be filtered.

''' )

    filter_args.add_argument(
'--exclude_filters', nargs='+', help=
'''Filter variants that have these FILTER Fields.
If multiple filter annotations are given for a
variant it will be excluded if any match one of
the given fields.

''' )

    filter_args.add_argument(
'-t', '--var_types', nargs='+', metavar='TYPE', help=
'''Keep variants of the following type(s). Valid
types are 'SNV' (single nucleotide variants),
'MNV' (multi-nucleotide variants excluding
indels), 'INSERTION' (insertions or duplications
relative to the reference), 'DELETION' (deletions
relative to the reference), 'INDEL' (shorthand for
both insertions and deletions) and 'SV'
(structural variants). If a site is multiallelic
it will be retained if any ALT allele matches one
of these types, but per-allele filtering for
segregation filtering will only consider ALT
alleles of the appropriate types.

''')

    filter_args.add_argument(
'-max_alts', '--max_alt_alleles', type=int, help=
'''Filter variants at sites with more than this
many ALT alleles. For example, using
'--max_alt_alleles 1' would retain biallelic sites
only ('*' alleles are not counted for this
purpose).

''')

    filter_args.add_argument(
'-af', '--af', type=float, help=
'''Maximum AF value in input VCF. Any allele with an
AF > than this value will be filtered.

''')

    filter_args.add_argument(
'-min_af', '--min_af', type=float, help=
'''Minimum AF value in input VCF. Any allele with an
AF < than this value will be filtered.

''')

    filter_args.add_argument(
'-filtering_an', '--filtering_an', type=int, default=0, help=
'''Require at least this number of allele calls
before filtering with --af or --min_af options.
Useful to avoid filtering at sites with many
uncalled genotpyes. If AN field is missing from a
record and this value is > 0, --af/--min_af
filtering will not occur for that record.
Default=0.

''')

    filter_args.add_argument(
'-min_an', '--min_an', type=int, default=0, help=
'''Minimum number of allele calls as given by the
'AN' INFO field. Variants with an AN value below
this threshold or a missing AN field will be
filtered. Default=0.

''')

    filter_args.add_argument(
'-ac', '--ac', type=int, help=
'''Maximum AC value in input VCF. Any allele with an
AC > than this value will be filtered.

''')

    filter_args.add_argument(
'-min_ac', '--min_ac', type=float, help=
'''Minimum AC value in input VCF. Any allele with an
AC < than this value will be filtered.

''')

    filter_args.add_argument(
'-c', '--csq', nargs='*', help=
'''One or more VEP consequence classes to retain.
Variants which do not result in one of these VEP
consequence classes will be filtered. If this
option is used with no values then the following
default classes will be used:

                  TFBS_ablation
                  TFBS_amplification
                  inframe_deletion
                  inframe_insertion
                  frameshift_variant
                  initiator_codon_variant
                  missense_variant
                  protein_altering_variant
                  regulatory_region_ablation
                  regulatory_region_amplification
                  splice_acceptor_variant
                  splice_donor_variant
                  start_lost
                  stop_gained
                  stop_lost
                  transcript_ablation
                  transcript_amplification

You may also pass the value "default" in order to
include these default classes in addition to other
specified classes. Alternatively, you may specify
'all' to include all consequence types if, for
example, you want to filter on other VEP
annotations (e.g. allele frequency or biotype)
irrespective of consequence.

Note, that using the --csq option automatically
turns on biotype filtering (see the --biotypes
option below).

''' )

    filter_args.add_argument(
'--impact', nargs='+', help=
'''One or more VEP 'IMPACT' types to retain. Valid
values are 'HIGH', 'MODERATE', 'LOW' and
'MODIFIER'. Any consequence classes specified by
the '--csq' argument will still be retained
irrespective of values specified here.

Note, that using the --impact option automatically
turns on biotype filtering (see the --biotypes
option below).

''')

    filter_args.add_argument(
'--canonical', '-canonical', action='store_true', help=
'''When used in conjunction with --csq argument,
ignore consequences for non-canonical transcripts.

''')

    filter_args.add_argument(
'--flagged_features', '-flagged_features', action='store_true', help=
'''When used in conjunction with --csq argument,
ignore consequences for flagged
transcripts/features (i.e. with a non-empty
'FLAGS' CSQ field).

''')

    filter_args.add_argument(
'--biotypes', '-biotypes', nargs='+', default=[], metavar='BIOTYPE', help=
'''When used in conjunction with --csq argument,
ignore consequences in biotypes other than those
specified here. By default only consequences in
features with the following biotypes are
considered:

            3prime_overlapping_ncrna
            antisense
            CTCF_binding_site
            enhancer
            IG_C_gene
            IG_D_gene
            IG_J_gene
            IG_V_gene
            lincRNA
            miRNA
            misc_RNA
            Mt_rRNA
            Mt_tRNA
            open_chromatin_region
            polymorphic_pseudogene
            processed_transcript
            promoter
            promoter_flanking_region
            protein_coding
            rRNA
            sense_intronic
            sense_overlapping
            snoRNA
            snRNA
            TF_binding_site
            translated_processed_pseudogene
            TR_C_gene
            TR_D_gene
            TR_J_gene
            TR_V_gene

Use this argument to specify one or more biotypes
to consider instead of those listed above. You may
also include the value 'default' in your list to
include the default values listed above in
addition to others provided to this argument.
Alternatively you may use the value 'all' to
disable filtering on biotypes.

''')

    filter_args.add_argument(
'--feature_blacklist', '--blacklist', help=
'''A file containing a list of Features (e.g. Ensembl
transcript IDs) to ignore. These must correspond
to the IDs in the 'Feature' field annotated by
VEP.

''')

    filter_args.add_argument(
'-m', '--missense_filters', default=[], nargs='+', help=
'''A list of in silico prediction programs to use
for filtering missense variants (must be used in
conjunction with --csq argument). The programs
provided here must have been annotated on the
input VCF file either directly by VEP or via the
dbNSFP VEP plugin. Recognised program names and
default 'damaging' values are provided in the
"data/vep_insilico_pred.tsv" file.

You may optionally specify score criteria for
filtering as in the the following examples:

    FATHMM_pred=D
    MutationTaster_pred=A
    MetaSVM_rankscore=0.8

Or you may just provide the program names
and the default 'damaging' prediction values
will be used, as listed in the file
"vase/data/vep_insilico_pred.tsv".

By default, a missense consequence is filtered
unless each of the programs listed here have an
appropriate or missing prediction/score. This
behaviour can be changed using the
--filter_unpredicted or --keep_if_any_damaging
flags.

''')

    filter_args.add_argument(
'--filter_unpredicted', '-filter_unpredicted', action='store_true',
default=False, help=
'''For use in conjunction with --missense_filters.
The default behaviour when using
--missense_filters is to ignore a program if
there is no prediction given (i.e. the score/pred
is empty). That is, if there are no predictions
for any of the programs annotating a missense
consequence, it will not be filtered, while if
predictions are missing for only some, filtering
will proceed as normal with the other programs. If
this option is given, missense variants will be
filtered if any program does not have a
prediction/score.

''')
    filter_args.add_argument(
'--keep_if_any_damaging', '-keep_if_any_damaging', action='store_true',
default=False, help=
'''For use in conjunction with --missense_filters.
If this option is provided, a missense consequence
is only filtered if ALL of the programs provided
to --missense_filters do not have an appropriate
prediction/score - that is, the missense
consequence will be retained if ANY of the given
programs has an appropriate value for the
prediction/score. This behaviour is overridden by
'--filter_unpredicted' when a prediction/score is
missing for any program.

''')

    filter_args.add_argument(
'--splice_filters', nargs='+', help=
'''Similar to --missense_filters except only splice
consequences (splice_donor_variant,
splice_acceptor_variant and splice_region_variant)
are checked versus the given in silico prediction
programs. Currently only dbscSNV, (rf_score and
ada_score), MaxEntScan and SpliceDistance
(https://github.com/gantzgraf/SpliceDistance)
plugins are supported.

For example '--splice_filters ada_score' will
filter splice region variants with a dbscSNV
ada_score cutoff below the default value (0.7).
Alternatively, '--splice_filters ada_score=0.9'
would filter on a higher threshold of 0.9 or
above.

''')

    filter_args.add_argument(
'--splice_filter_unpredicted', action='store_true', default=False, help=
'''Same as --filter_unpredicted but for
--splice_filters only.

''')

    filter_args.add_argument(
'--splice_keep_if_any_damaging', action='store_true', default=False, help=
'''Same as --keep_if_any_damaging but for
--splice_filters only.

''')

    filter_args.add_argument(
'--retain_labels', metavar='Label=Value', nargs='+', help=
'''Retain consequence annotations if there is a
matching annotation for the given label. For
example, to retain any consequence where there is
a VEP annotation for 'FOO' matching 'BAR' use
"--retain_labels FOO=BAR".

''')

    filter_args.add_argument(
'--no_vep_freq', '-no_vep_freq', action='store_true', help=
'''Use this option if you want to ignore VEP
annotated allele frequencies when using --freq and
--csq/--impact options.

''')

    filter_args.add_argument(
'--vep_af', '-vep_af', nargs='+', default=[], help=
'''One or more VEP allele frequency annotations to
use for frequency filtering. Default is to use the
following (assuming --csq/--impact and --freq or
--min_freq arguments are in effect):

                MAX_AF
                AFR_AF
                AMR_AF
                EAS_AF
                EUR_AF
                SAS_AF
                AA_AF
                EA_AF
                gnomAD_AF
                gnomAD_AFR_AF
                gnomAD_AMR_AF
                gnomAD_ASJ_AF
                gnomAD_EAS_AF
                gnomAD_FIN_AF
                gnomAD_NFE_AF
                gnomAD_OTH_AF
                gnomAD_SAS_AF
                gnomADg_AF_AFR
                gnomADg_AF_AMR
                gnomADg_AF_ASJ
                gnomADg_AF_EAS
                gnomADg_AF_FIN
                gnomADg_AF_NFE
                gnomADg_AF_OTH

''')

    filter_args.add_argument(
'--pathogenic', action='store_true', help=
'''When used in conjunction with --csq argument,
retain variants flagged as pathogenic by either
'CLIN_SIG' or 'clinvar_clnsig' VEP annotations
even if the consequence class is not included in
those selected using the --csq argument. Note that
this only alters filtering as specified by --csq
and --missense_filters options; frequency,
canonical transcript, flagged_features and biotype
filtering will still occur as normal.

''')

    filter_args.add_argument(
'--no_conflicted', action='store_true', help=
'''When used in conjunction with --pathogenic
argument, variants labelled as pathogenic will
only be retained if there are no conflicting
'benign' or 'likely benign' assertions.

''')

    #args for specifying files for annotations/filtering
    bed_args.add_argument(
'--region', metavar='REGION', nargs='+', help=
'''Only include variants overlapping these intervals
(in the format chr1:1000-2000).

''')

    bed_args.add_argument(
'--bed', metavar='BED', help=
'''Only include variants overlapping the intervals in
the provided BED file.

''')

    bed_args.add_argument(
'--gene_bed', metavar='BED', help=
'''Only include variants overlapping the intervals in
the provided BED file and with a VEP annotation
for the provided gene/transcript/protein
identifiers. The fourth column of the provided BED
file should contain gene symbols and/or Ensembl
gene/transcript/protein identifiers (multiple IDs
should be separated with '/' characters.
Requires input to be annotated with VEP.

''')

    region_args.add_argument(
'--stream', action='store_true', help=
'''When using region filtering arguments, read all
variants in your VCF and filter out all that do
overlap your regions of interest instead of
index-jumping. This allows processing of unindexed
VCFs and potentially speeds up processing of VCFs
with large structural variants that otherwise
severely slow-down tabix-style variant retrieval.

''')

    region_args.add_argument(
'--exclude_regions', action='store_true', help=
'''When using region filtering arguments, output
variants that do NOT overlap regions instead of
those that do. This forces streaming rather than
index-jumping retrieval.

''')
    #args for specifying files for annotations/filtering
    file_args.add_argument(
'--cadd_files', '-cadd_files', metavar='FILE', nargs='+', default=[], help=
'''One or more tabix indexed CADD annotation files
(such as those found at
http://cadd.gs.washington.edu/download). Variants
in your input that match any scored variant in
these files will have the CADD RawScore and PHRED
values added to the INFO field, one per ALT
allele. Alleles/variants can be filtered on these
scores using the --cadd_phred or --cadd_raw
options.

''')

    file_args.add_argument(
'-cadd_dir', '--cadd_directory', metavar='DIR', help=
'''Directory containing one or more tabix indexed
CADD annotation files to be used as above. Only
files with '.gz' or '.bgz' extensions will be
included.

''')

    file_args.add_argument(
'--missing_cadd_scores', metavar='FILE', help=
'''Filename to output variants that are not found
in CADD annotation files. Output will be gzip
compressed and in a format suitable for uploading
to https://cadd.gs.washington.edu/score for
scoring (or for scoring locally).

''')

    file_args.add_argument(
'--cadd_phred', '-cadd_phred', metavar='FLOAT', type=float, help=
'''CADD PHRED score cutoff. Variants with a CADD
PHRED score below this value will be filtered.
Only used with annotations from files supplied to
--cadd_files or --cadd_dir arguments or a
pre-annotated CADD_PHRED_score INFO field. To
filter on CADD scores annotated using the VEP
dbNSFP plugin use the --missense_filters option.

''')

    file_args.add_argument(
'--cadd_raw', '-cadd_raw', metavar='FLOAT', type=float, help=
'''CADD RawScore cutoff. Variants with a CADD
RawScore below this value will be filtered.
Only used with annotations from files supplied to
--cadd_files or --cadd_dir arguments or a
pre-annotated CADD_raw_score INFO field. To filter
on CADD scores annotated using the VEP dbNSFP
plugin use the --missense_filters option.

''')

    file_args.add_argument(
'-d', '--dbsnp', '--clinvar', metavar='VCF', nargs='+', default=[], help=
'''dbSNP or ClinVar VCF file for variant
annotating/filtering.

''')
    file_args.add_argument(
'-g', '--gnomad', '--exac', metavar='VCF', nargs='+', default=[], help=
'''gnomAD/ExAC file for variant annotating/filtering
using population allele frequencies. By default
allele frequencies from AFR, AMR, EAS, FIN, NFE
and SAS populations are used. Populations to use
can be chosen with the --gnomad_pops argument.

''')

    file_args.add_argument(
'--gnomad_pops', metavar='POP', nargs='+', default=["AFR", "AMR", "EAS", "FIN",
                                                    "NFE", "SAS"], help=
'''Populations to use for annotating/filtering from
gnomAD VCFs. The default are AFR, AMR, EAS, FIN,
NFE and SAS. Any combination of these plus "ASJ"
and "POPMAX" can be chosen.

''')

    file_args.add_argument(
'--vcf_filter', '-vcf_filter', metavar='VCF,ID[,INFO_FIELD ...]', nargs='+',
default=[], help=
'''VCF file(s) and name(s) to use in INFO fields
for frequency annotation and/or filtering. Each
file and its associated annotation ID should be
given in pairs separated with commas. INFO fields
will be added to your output for the AN and AF
fields with the field names of VASE_<ID>_AN and
VASE_<ID>_AF. If --freq or --min_freq arguments
are set then matching variants in your input will
be filtered using AF values found in these files.

You may also add additonal INFO fields to extract
and annotate your matching variants with by
including additional comma-separated fields after
the ID.

''')

    file_args.add_argument(
'--dng_vcf', nargs='+', help=
'''One or more VCFs created by DeNovoGear for adding
PP_DNM and PP_NULL fields to sample calls.

''')

    file_args.add_argument(
'-f', '--freq', '--max_freq', type=float, help=
'''Allele frequency cutoff (between 0 and 1). Used
for extenal allele frequency sources such as
--dbsnp or --gnomad files. Alleles/variants with
an allele frequency equal to or greater than
this value in these sources will be filtered
from your input. VEP annotated allele frequencies
will also be used for filtering if '--csq' or
'--impact' options are used (annotations from VEP
v90 or higher required). This can be disabled with
the --no_vep_freq option.

''')

    file_args.add_argument(
'--min_freq', '-min_freq', type=float, help=
'''Minimum allele frequency cutoff (between 0 and 1).
Used for extenal allele frequency sources such as
--dbsnp or --gnomad files. Alleles/variants with
a frequency lower than this value will be filtered.
VEP annotated allele frequencies will also be used
for filtering if '--csq' option is used (VEP v90
or higher required). This can be disabled with the
--no_vep_freq option.

''')

    file_args.add_argument(
'-b', '--build', type=int, metavar='dbSNP_build', help=
'''dbSNP build version cutoff. For use with --dbsnp
files. Alleles/variants present in this dbSNP
build or earlier will be filtered from input.
from your input.

''')
    file_args.add_argument(
'--max_build', '-max_build', type=int, metavar='dbSNP_build', help=
'''Maximum dbSNP build version cutoff. For use with
--dbsnp files. Alleles/variants present in dbSNP
builds later than this version will be filtered.

''')
    file_args.add_argument(
'--filter_known', '-filter_known', action='store_true', default=False, help=
'''Filter any allele/variant present in any of the
files supplied to --gnomad, --dbsnp or
--vcf_filter arguments, or if using '--csq' if any
allele frequency is recorded for any of VEP's AF
annotations.

''')
    file_args.add_argument(
'--filter_novel', '-filter_novel', action='store_true', default=False, help=
'''Filter any allele/variant NOT present in
any of the files supplied to --gnomad or --dbsnp or
--vcf_filter arguments, or if using '--csq' if no
allele frequency is recorded for any of VEP's AF
annotations.

''')
    file_args.add_argument(
'--clinvar_path', '-path', action='store_true', default=False, help=
'''Retain variants with ClinVar 'likely pathogenic'
or 'pathogenic' flags regardless of frequency or
other settings provided to other Annotation File
Arguments. This requires one of the files
provided to --dbsnp to have CLNSIG annotations
from ClinVar.

''')
    file_args.add_argument(
'-ignore_existing', '--ignore_existing_annotations', action='store_true',
default=False, help=
'''Ignore previously added annotations from
dbSNP/gnomAD/CADD files that may be present in the
input VCF. Default behaviour is to use these
annotations for filtering if present and the
relevant arguments (e.g. --freq) are given.

''')

    #args for sample based filtering
    sample_args.add_argument(
'--cases', '-cases', default=[], nargs='+', metavar='SAMPLE_ID', help=
'''One or more sample IDs to treat as cases. Default
behaviour is to retain variants/alleles present in
all of these samples as long as they are not
present in any sample specified using the
'--controls' option. This behaviour can be
adjusted using other options detailed below.

''')
    sample_args.add_argument(
'--controls', '-controls', default=[], nargs='+', metavar='SAMPLE_ID', help=
'''One or more sample IDs to treat as controls.
Default behaviour is to filter variants/alleles
present in any of these samples. This behaviour
can be adjusted using other options detailed
below.

''')
    sample_args.add_argument(
'-ped', '--ped', help=
'''A ped file containing information about samples in
your VCF for use for filtering on affectation
status and inheritance patterns.

A PED file is a white-space (space or tab)
delimited file with the first six mandatory
columns:

     Family ID
     Individual ID
     Paternal ID
     Maternal ID
     Sex (1=male; 2=female; other=unknown)
     Phenotype

Affection status should be coded:

    -9 missing
     0 missing
     1 unaffected
     2 affected

All individuals of interest, including parents,
should be specified in this file so that
affectation status can be read and dominant versus
recessive/de novo inheritance models can be
inferred.

''')
    gt_args.add_argument(
'-gq', '--gq', type=int, default=20, help=
'''Minimum genotype quality score threshold. Sample
genotype calls with a score lower than this
threshold will be treated as no-calls.
Default = 20.

''')

    gt_args.add_argument(
'-dp', '--dp', type=int, default=0, help=
'''Minimum genotype depth threshold. Sample genotype
calls with a read depth lower than this threshold
will be treated as no-calls. Default = 0.

''')

    gt_args.add_argument(
'-max_dp', '--max_dp', type=int, default=0, help=
'''Maximum genotype depth threshold. Sample genotype
calls with a read depth higher than this threshold
will be treated as no-calls. Default = 0 (i.e. not
used).

''')

    gt_args.add_argument(
'-het_ab', '--het_ab', type=float, default=0., metavar='AB', help=
'''Minimum genotype allele balance for heterozygous
genotypes. Heterozygous sample genotype calls
with a ratio of the alternate allele vs total
depth lower than this threshold will be treated as
no-calls. Default = 0.

''')

    gt_args.add_argument(
'-hom_ab', '--hom_ab', type=float, default=0., metavar='AB', help=
'''Minimum genotype allele balance for homozygous
genotypes. Homozygous sample genotype calls
with a ratio of the alternate allele vs total
depth lower than this threshold will be treated as
no-calls. Default = 0.

''')

    gt_args.add_argument(
'-con_gq', '--control_gq', type=int, help=
'''Minimum genotype quality score threshold for
parents/unaffecteds/controls when filtering
variants. Defaults to the same value as --gq but
you may wish to set this to a lower value if, for
example, you require less evidence from
controls/unaffected in order to filter a variant
or from parental genotype calls when confirming
a potential de novo variant.

''')

    gt_args.add_argument(
'-con_dp', '--control_dp', type=int, help=
'''Minimum depth threshold for
parents/unaffecteds/controls when filtering
variants. Defaults to the same value as --dp but
you may wish to set this to a lower value if, for
example, you require less evidence from
controls/unaffected in order to filter a variant
or from parental genotype calls when confirming
a potential de novo variant.

''')

    gt_args.add_argument(
'-con_max_dp', '--control_max_dp', type=int, help=
'''Maximum depth threshold for
parents/unaffecteds/controls when filtering
variants. Defaults to the same value as --max_dp.

''')

    gt_args.add_argument(
'-con_het_ab', '--control_het_ab', type=float, metavar='AB', help=
'''Minimum genotype allele balance for heterozygous
genotypes. Heterozygous sample genotype calls
with a ratio of the alternate allele vs total
depth lower than this threshold will be treated as
no-calls. Defaults to the same as --het_ab but
you may wish to set this to a lower value if, for
example, you require less evidence from
controls/unaffected in order to filter a variant.

''')

    gt_args.add_argument(
'-con_hom_ab', '--control_hom_ab', type=float, metavar='AB', help=
'''Minimum genotype allele balance for homozygous
genotypes. Homozygous sample genotype calls
with a ratio of the alternate allele vs total
depth lower than this threshold will be treated as
no-calls. Defaults to the same as --hom_ab but
you may wish to set this to a lower value if, for
example, you require less evidence from
controls/unaffected in order to filter a variant.

''')

    gt_args.add_argument(
'-con_ref_ab', '--control_max_ref_ab', type=float, metavar='AB', help=
'''Maximum genotype allele balance for
parents/unaffecteds/controls with reference (0/0)
genotypes when filtering variants. If you wish to
count/exclude variants where controls/unaffecteds
are called as homozygous reference but still have a
low proportion of ALT alleles specify a suitable
cutoff here.

''')

    sv_gt_args.add_argument(
'-sv_gq', '--sv_gq', type=int, default=20, help=
'''Minimum genotype quality score threshold for
structural variants. Sample genotype calls with a
score lower than this threshold will be treated as
no-calls. Default = 20.

''')

    sv_gt_args.add_argument(
'-sv_dp', '--sv_dp', type=int, default=0, help=
'''Minimum genotype 'depth' threshold for structural
variants. Sample genotype calls with fewer than
this nunmber of supporting reads will be treated
as no-calls. Default = 0.

''')

    sv_gt_args.add_argument(
'-sv_max_dp', '--sv_max_dp', type=int, default=0, help=
'''Maximum genotype 'depth' threshold for structural
variants. Sample genotype calls with more than
this nunmber of supporting reads will be treated
as no-calls. Default = 0 (i.e. not used).

''')

    sv_gt_args.add_argument(
'-sv_het_ab', '--sv_het_ab', type=float, default=0., metavar='AB', help=
'''Minimum genotype allele balance for heterozygous
genotypes for structural variants. Heterozygous
sample genotype calls with a ratio of reads
supporting the alternate allele vs total
supporting reads lower than this threshold will
be treated as no-calls. Default = 0.

''')

    sv_gt_args.add_argument(
'-sv_hom_ab', '--sv_hom_ab', type=float, default=0., metavar='AB', help=
'''Minimum genotype allele balance for homozygous
genotypes for structural variants. Homozygous
sample genotype calls with a ratio of reads
supporting the alternate allele vs total
supporting reads lower than this threshold will be
treated as no-calls. Default = 0.

''')

    sv_gt_args.add_argument(
'-sv_con_gq', '--sv_control_gq', type=int, help=
'''Minimum genotype quality score threshold for
parents/unaffecteds/controls when filtering
structural variants. Defaults to the same value as
--sv_gq but you may wish to set this to a lower
value if, for example, you require less evidence
from controls/unaffected in order to filter a
variant or from parental genotype calls when
confirming a potential de novo variant.

''')

    sv_gt_args.add_argument(
'-sv_con_dp', '--sv_control_dp', type=int, help=
'''Minimum supporting read threshold for
parents/unaffecteds/controls when filtering
structural variants. Defaults to the same value as
--sv_dp but you may wish to set this to a lower
value if, for example, you require less evidence
from controls/unaffected in order to filter a
variant or from parental genotype calls when
confirming a potential de novo variant.

''')

    sv_gt_args.add_argument(
'-sv_con_max_dp', '--sv_control_max_dp', type=int, help=
'''Maximum supporting read threshold for
parents/unaffecteds/controls when filtering
structural variants. Defaults to the same value as
--sv_max_dp.

''')

    sv_gt_args.add_argument(
'-sv_con_het_ab', '--sv_control_het_ab', type=float, metavar='AB', help=
'''Minimum genotype allele balance for heterozygous
genotypes for structural variants. Heterozygous
sample genotype calls with a ratio of the
reads supporting the alternate allele vs total
supporting reads depth lower than this threshold
will be treated as no-calls. Defaults to the same
as --sv_het_ab but you may wish to set this to a
lower value if, for example, you require less
evidence from controls/unaffected in order to
filter a variant.

''')

    sv_gt_args.add_argument(
'-sv_con_hom_ab', '--sv_control_hom_ab', type=float, metavar='AB', help=
'''Minimum genotype allele balance for homozygous
genotypes for structural variants. Homozygous
sample genotype calls with a ratio of the
reads supporting the alternate allele vs total
supporting reads depth lower than this threshold
will be treated as no-calls. Defaults to the same
as --sv_hom_ab but you may wish to set this to a
lower value if, for example, you require less
evidence from controls/unaffected in order to
filter a variant.

''')

    sv_gt_args.add_argument(
'-sv_con_ref_ab', '--sv_control_max_ref_ab', type=float, metavar='AB', help=
'''Maximum genotype allele balance for
parents/unaffecteds/controls with reference (0/0)
genotypes when filtering structural variants. If
you wish to count/exclude variants where
controls/unaffecteds are called as homozygous
reference but still have a low proportion of ALT
alleles specify a suitable cutoff here.

''')

    sample_args.add_argument(
'--n_cases', '-n_cases', type=int, help=
'''Instead of requiring a variant to be present in
ALL samples specified by --cases, require at least
this many cases.

''')
    sample_args.add_argument(
'--n_controls', '-n_controls', type=int, help=
'''Instead of filtering an allele/variant if present
in ANY sample specified by --controls, require at
least this many controls to carry a variant before
it is filtered.

''')
    sample_args.add_argument(
'--biallelic', '-biallelic', '--recessive', action='store_true', help=
'''Identify variants matching a recessive inheritance
pattern in cases present in the PED file specified
by the --ped argument. Input must be VEP
annotated. If the --csq argument is given, only
variants/alleles resulting in the given functional
consequences will be used to identify qualifying
variants/alleles, otherwise the default set of
VEP consequences (see --csq argument for details)
will be used.

''')
    sample_args.add_argument(
'--de_novo', '-de_novo', action='store_true', help=
'''Idenfify apparent de novo variants in cases
present in the PED file specified by the --ped
argument. This requires that at least one
parent-child trio exists in the given PED file.

''')
    sample_args.add_argument(
'--dominant', '-dominant', action='store_true', help=
'''Idenfify variants segregating in manner matching
dominant inheritance in cases present in the PED
file specified by the --ped argument.

''')
    sample_args.add_argument(
'--min_families', '-min_families', type=int, default=1, help=
'''Minimum number of families (or unrelated samples)
required to contain a qualifying dominant/de novo
or biallelic combination of variants in a feature
before they are output. Default = 1.

''')
    sample_args.add_argument(
'--singleton_recessive', '-singleton_recessive', default=[], nargs='+',
metavar='SAMPLE_ID', help=
'''One or more samples to treat as unrelated
individuals and identify variants matching a
recessive inheritance pattern.

''')
    sample_args.add_argument(
'--singleton_dominant', '-singleton_dominant', default=[], nargs='+',
metavar='SAMPLE_ID', help=
'''One or more samples to treat as unrelated
individuals and identify variants matching a
dominant inheritance pattern.

''')
    sample_args.add_argument(
'--seg_controls', '-seg_controls', default=[], nargs='+', metavar='SAMPLE_ID',
help=
'''One or more sample IDs to treat as controls for
segregation analysis only. Useful if you want to
specify controls to use for rejecting compound
heterozygous combinations of variants or
homozygous variants when using --biallelic option.
Unlike the --controls option, alleles/variants
present in these samples will only be used for
filtering when looking at inheritance patterns in
families present in a PED file or samples
specified with --singleton_recessive or
--singleton_dominant options. This option is not
necessary if your unaffected samples are already
present in your PED file specified with --ped.

''')
    sample_args.add_argument(
'--strict_recessive', action='store_true', help=
'''When using the --biallelic/--recessive option,
for any affected sample with parents, require
confirmation of parental genotypes. If either
parent genotype is a no-call or fails genotype
filters then a potential biallelic variant will be
ignored.

''')

    #help/logging arguments
    help_args.add_argument(
'--prog_interval', '-prog_interval', type=int, default=1000, metavar='N', help=
'''Report progress information every N variants.
Default=1000.

''')
    help_args.add_argument(
'--log_progress', '-log_progress', action='store_true', help=
'''Use logging output for progress rather than wiping
progress line after each update.

''')
    help_args.add_argument(
'--no_progress', action='store_true', help=
'''Do not output progress information to STDERR.

''')
    help_args.add_argument(
'--quiet', action='store_true', help=
'''Do not output INFO messages to STDERR. Warnings
will still be shown.

''')
    help_args.add_argument(
'--debug', action='store_true', help=
'''Output debugging level information to STDERR.

''')
    help_args.add_argument(
'--no_warnings', action='store_true', help=
'''Do not output INFO or WARN messages to
STDERR. Only program ending errors will appear.

''')
    help_args.add_argument(
'--silent', action='store_true', help=
'''Equivalent to specifying both '--no_progress' and
'--no_warnings' options.

''')

    help_args.add_argument(
'-h', '--help', action='help', help=
'''Show this help message and exit

''')
    #end of args
    return parser

if __name__ == '__main__':
    parser = parse_args()
    vase_args = parser.parse_args()
    if vase_args.filter_novel and vase_args.filter_known:
        parser.print_usage()
        sys.stderr.write("vase.py: error: --filter_known and --filter_novel " +
                         "arguments can not be used together.\n")
        sys.exit(2)
    vase_runner = VaseRunner(vase_args)
    vase_runner.run()
