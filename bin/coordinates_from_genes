#!/usr/bin/env python3
import sys
import re
import operator
import logging
import argparse
from natsort import natsorted
from vase.ensembl_rest_queries import EnsemblRestQueries

ensg = re.compile(r'''^ENS\w*G\d{11}(\.\d+)?''')
enst = re.compile(r'''^ENS\w*T\d{11}(\.\d+)?''')
ensp = re.compile(r'''^ENS\w*P\d{11}(\.\d+)?''')
chrm = re.compile(r'''^[1-9M]?[0-9XYTWZUV]$''')

def main(genes=[], gene_list=None, grch37=False, species="human",
         main_chr_only=False, add_chr=False, sort_regions=False,
         output_intervals=False, timeout=5.0, max_retries=2, quiet=False,
         debug=False):
    logger = get_logger(quiet, debug)
    ensembl_rest = EnsemblRestQueries(use_grch37_server=grch37,
                                      timeout=timeout, max_retries=max_retries,
                                      log_level=logger.level)
    if gene_list:
        if genes is None:
            genes = []
        genes.extend(read_gene_list(gene_list, logger))
    if not genes:
        raise RuntimeError("No gene IDs - nothing to do!")
    genes = set(genes)
    id_and_type = parse_gene_ids(genes)
    regions = []
    for x in id_and_type:
        r = get_coords(*x, species, ensembl_rest, logger)
        if r:
            regions.extend(r)
    if sort_regions:
        regions = natsorted(regions, key=operator.itemgetter(0, 1, 2, 3))
    output_regions(regions, main_chr_only, add_chr, output_intervals)

def output_regions(regions, main_chr_only=False, add_chr=False,
                   output_intervals=False):
    '''
        Output BED format - columns are chr, start (0-based), end, name,
        score and strand.
    '''
    strand = {-1: '-', 1: '+'}
    for r in regions:
        if main_chr_only and not chrm.match(r[0]):
            continue
        if add_chr and chrm.match(r[0]):
            r[0] = "chr" + r[0]
        if output_intervals:
            print("{}:{}-{}\t{}".format(r[0], r[1], r[2], r[4] + "/" + r[5]))
        else:
            print(str.join("\t", (str(x) for x in (r[0], r[1] -1 , r[2],
                                                   r[4] + "/" + r[5], '0',
                                                   strand[r[3]]))))

def get_coords(x, t, species, rest, logger):
    gene_info = []
    try:
        if t == 'protein':
            logger.info("Interpretting {} as Ensembl protein ID".format(x))
            gene_info.append(rest.gene_from_ensp(x))
        elif t == 'transcript':
            logger.info("Interpretting {} as Ensembl transcript ID".format(x))
            gene_info.append(rest.gene_from_enst(x))
        elif t == 'gene':
            logger.info("Interpretting {} as Ensembl gene ID".format(x))
            gene_info.append(rest.lookup_id(x))
        else:
            logger.info("Interpretting {} as gene symbol".format(x))
            data = rest.get_via_xref(x, species, 'gene')
            if len(data) > 1:
                logger.warn("More than one Gene match for {}".format(x))
            for d in data:
                gene_info.append(rest.lookup_id(d['id']))
    except Exception as err:
        logger.warn(err)
    if not gene_info:
        logger.warn("REST lookup failed for {}".format(x))
        return []
    return ([inf[x] for x in ['seq_region_name', 'start', 'end', 'strand',
                              'id', 'display_name']] for inf in gene_info)

def symbol_or_id(g):
    if ensg.match(g):
        return 'gene'
    elif enst.match(g):
        return 'transcript'
    elif ensp.match(g):
        return 'protein'
    else:
        return 'symbol'

def parse_gene_ids(genes):
    return( (x, symbol_or_id(x)) for x in sorted(genes))

def read_gene_list(f, logger):
    genes = []
    with open(f, 'rt') as infile:
        for line in infile:
            if line.startswith('#'):
                continue
            x = line.rstrip().split()
            if x:
                genes.append(x[0])
    if not genes:
        logger.warn("No genes found in {}".format(f))
    return genes

def get_logger(quiet=False, debug=False):
    logger = logging.getLogger("coordinates_from_genes")
    if debug:
        logger.setLevel(logging.DEBUG)
    elif quiet:
        logger.setLevel(logging.WARNING)
    else:
        logger.setLevel(logging.INFO)
    formatter = logging.Formatter(
                    '[%(asctime)s] %(name)s - %(levelname)s - %(message)s')
    ch = logging.StreamHandler()
    ch.setLevel(logger.level)
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    return logger

def parse_args():
    parser = argparse.ArgumentParser(
           usage='''%(prog)s -l gene_list.txt [options]
       %(prog)s -g gene1 [gene2 ...] [options]''',
           description='''Retrieve gene coordinates from Ensembl's REST
                          server.''')
    parser.add_argument("-g", "--genes", nargs='+', help=
                        '''One or more gene symbols/IDs to retrieve coordinates
                           for. Recognises Ensembl gene/transcript/protein
                           identifiers and otherwise does a cross-reference
                           lookup in other databases.''')
    parser.add_argument("-l", "--gene_list", help=
                        '''File containing a list of gene symbols/IDs to
                           retrieve coordinates for.''')
    parser.add_argument("--grch37", action="store_true", help=
                        '''Use GRCh37 REST server
                           (http://grch37.rest.ensembl.org/) for REST
                           lookups.''')
    parser.add_argument("-s", "--species", default='human', help=
                        '''Species to look up (if using gene symbols rather
                           than IDs). Default=human''')
    parser.add_argument("-x", "--sort_regions", action='store_true', help=
                        '''Output regions sorted by chromosome and coordinate.
                        ''')
    parser.add_argument("-c", "--main_chr_only", action='store_true', help=
                        '''Only output regions on autosomal and sex chromosomes
                           - ignore unplaced contigs/haplotype regions.''')
    parser.add_argument("-a", "--add_chr", action='store_true', help=
                        '''Prepend 'chr' to standard chromosomes in output.''')
    parser.add_argument("-i", "--output_intervals", action='store_true', help=
                        '''Output interval format rather than BED.''')
    parser.add_argument("-t", "--timeout", type=float, default=5.0, help=
                        '''Timeout (in seconds) for REST lookups.
                           Default=5.0''')
    parser.add_argument("-m", "--max_retries", type=int, default=2, help=
                        '''Number of reattempts for REST lookups that fail.
                           Default=2''')
    parser.add_argument('-q', '--quiet', action='store_true', help=
                        '''Do not output progress information to STDERR.''')
    parser.add_argument('-d', '--debug', action='store_true', help=
                        '''Output debugging information to STDERR.''')
    return parser

if __name__ == '__main__':
    parser = parse_args()
    args = parser.parse_args()
    if args.gene_list is None and args.genes is None:
        parser.error("At least one of --list or --genes is required.")
    main(**vars(args))
